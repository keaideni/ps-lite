// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meta.proto

#include "meta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_meta_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PBNode_meta_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_meta_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PBControl_meta_2eproto;
namespace ps {
class PBNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PBNode> _instance;
} _PBNode_default_instance_;
class PBControlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PBControl> _instance;
} _PBControl_default_instance_;
class PBMetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PBMeta> _instance;
} _PBMeta_default_instance_;
}  // namespace ps
static void InitDefaultsPBNode_meta_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ps::_PBNode_default_instance_;
    new (ptr) ::ps::PBNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ps::PBNode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PBNode_meta_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPBNode_meta_2eproto}, {}};

static void InitDefaultsPBControl_meta_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ps::_PBControl_default_instance_;
    new (ptr) ::ps::PBControl();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ps::PBControl::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PBControl_meta_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPBControl_meta_2eproto}, {
      &scc_info_PBNode_meta_2eproto.base,}};

static void InitDefaultsPBMeta_meta_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ps::_PBMeta_default_instance_;
    new (ptr) ::ps::PBMeta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ps::PBMeta::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PBMeta_meta_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPBMeta_meta_2eproto}, {
      &scc_info_PBControl_meta_2eproto.base,}};

namespace ps {

// ===================================================================

void PBNode::InitAsDefaultInstance() {
}
class PBNode::HasBitSetters {
 public:
  static void set_has_role(PBNode* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_id(PBNode* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_hostname(PBNode* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_port(PBNode* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_is_recovery(PBNode* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_customer_id(PBNode* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBNode::kRoleFieldNumber;
const int PBNode::kIdFieldNumber;
const int PBNode::kHostnameFieldNumber;
const int PBNode::kPortFieldNumber;
const int PBNode::kIsRecoveryFieldNumber;
const int PBNode::kCustomerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBNode::PBNode()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ps.PBNode)
}
PBNode::PBNode(const PBNode& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hostname()) {
    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  ::memcpy(&role_, &from.role_,
    static_cast<size_t>(reinterpret_cast<char*>(&customer_id_) -
    reinterpret_cast<char*>(&role_)) + sizeof(customer_id_));
  // @@protoc_insertion_point(copy_constructor:ps.PBNode)
}

void PBNode::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PBNode_meta_2eproto.base);
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&customer_id_) -
      reinterpret_cast<char*>(&role_)) + sizeof(customer_id_));
}

PBNode::~PBNode() {
  // @@protoc_insertion_point(destructor:ps.PBNode)
  SharedDtor();
}

void PBNode::SharedDtor() {
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PBNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBNode& PBNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PBNode_meta_2eproto.base);
  return *internal_default_instance();
}


void PBNode::Clear() {
// @@protoc_insertion_point(message_clear_start:ps.PBNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    hostname_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&role_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&customer_id_) -
        reinterpret_cast<char*>(&role_)) + sizeof(customer_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PBNode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PBNode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int32 role = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_role(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string hostname = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_hostname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 port = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_recovery = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_is_recovery(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 customer_id = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_customer_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PBNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ps.PBNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 role = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_role(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hostname = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_recovery = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_is_recovery(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_recovery_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 customer_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_customer_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &customer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ps.PBNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ps.PBNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PBNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ps.PBNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 role = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->role(), output);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional string hostname = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hostname(), output);
  }

  // optional int32 port = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  // optional bool is_recovery = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_recovery(), output);
  }

  // optional int32 customer_id = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->customer_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ps.PBNode)
}

size_t PBNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ps.PBNode)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required int32 role = 1;
  if (has_role()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->role());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string hostname = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  if (cached_has_bits & 0x0000003cu) {
    // optional int32 id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 port = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional bool is_recovery = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 customer_id = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->customer_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBNode::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PBNode*>(&from));
}

void PBNode::MergeFrom(const PBNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ps.PBNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
    }
    if (cached_has_bits & 0x00000002u) {
      role_ = from.role_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_recovery_ = from.is_recovery_;
    }
    if (cached_has_bits & 0x00000020u) {
      customer_id_ = from.customer_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PBNode::CopyFrom(const PBNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ps.PBNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void PBNode::Swap(PBNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBNode::InternalSwap(PBNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hostname_.Swap(&other->hostname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(role_, other->role_);
  swap(id_, other->id_);
  swap(port_, other->port_);
  swap(is_recovery_, other->is_recovery_);
  swap(customer_id_, other->customer_id_);
}

::std::string PBNode::GetTypeName() const {
  return "ps.PBNode";
}


// ===================================================================

void PBControl::InitAsDefaultInstance() {
}
class PBControl::HasBitSetters {
 public:
  static void set_has_cmd(PBControl* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_barrier_group(PBControl* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_msg_sig(PBControl* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBControl::kCmdFieldNumber;
const int PBControl::kNodeFieldNumber;
const int PBControl::kBarrierGroupFieldNumber;
const int PBControl::kMsgSigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBControl::PBControl()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ps.PBControl)
}
PBControl::PBControl(const PBControl& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      node_(from.node_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cmd_, &from.cmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_sig_) -
    reinterpret_cast<char*>(&cmd_)) + sizeof(msg_sig_));
  // @@protoc_insertion_point(copy_constructor:ps.PBControl)
}

void PBControl::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PBControl_meta_2eproto.base);
  ::memset(&cmd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_sig_) -
      reinterpret_cast<char*>(&cmd_)) + sizeof(msg_sig_));
}

PBControl::~PBControl() {
  // @@protoc_insertion_point(destructor:ps.PBControl)
  SharedDtor();
}

void PBControl::SharedDtor() {
}

void PBControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBControl& PBControl::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PBControl_meta_2eproto.base);
  return *internal_default_instance();
}


void PBControl::Clear() {
// @@protoc_insertion_point(message_clear_start:ps.PBControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&cmd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&msg_sig_) -
        reinterpret_cast<char*>(&cmd_)) + sizeof(msg_sig_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PBControl::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PBControl*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int32 cmd = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_cmd(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .ps.PBNode node = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ps::PBNode::_InternalParse;
          object = msg->add_node();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // optional int32 barrier_group = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_barrier_group(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 msg_sig = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_msg_sig(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PBControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ps.PBControl)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_cmd(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ps.PBNode node = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 barrier_group = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_barrier_group(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &barrier_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 msg_sig = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_msg_sig(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_sig_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ps.PBControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ps.PBControl)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PBControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ps.PBControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }

  // repeated .ps.PBNode node = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->node(static_cast<int>(i)),
      output);
  }

  // optional int32 barrier_group = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->barrier_group(), output);
  }

  // optional uint64 msg_sig = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->msg_sig(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ps.PBControl)
}

size_t PBControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ps.PBControl)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required int32 cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmd());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ps.PBNode node = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->node_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->node(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional int32 barrier_group = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->barrier_group());
    }

    // optional uint64 msg_sig = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msg_sig());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBControl::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PBControl*>(&from));
}

void PBControl::MergeFrom(const PBControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ps.PBControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_.MergeFrom(from.node_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      cmd_ = from.cmd_;
    }
    if (cached_has_bits & 0x00000002u) {
      barrier_group_ = from.barrier_group_;
    }
    if (cached_has_bits & 0x00000004u) {
      msg_sig_ = from.msg_sig_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PBControl::CopyFrom(const PBControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ps.PBControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBControl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->node())) return false;
  return true;
}

void PBControl::Swap(PBControl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBControl::InternalSwap(PBControl* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&node_)->InternalSwap(CastToBase(&other->node_));
  swap(cmd_, other->cmd_);
  swap(barrier_group_, other->barrier_group_);
  swap(msg_sig_, other->msg_sig_);
}

::std::string PBControl::GetTypeName() const {
  return "ps.PBControl";
}


// ===================================================================

void PBMeta::InitAsDefaultInstance() {
  ::ps::_PBMeta_default_instance_._instance.get_mutable()->control_ = const_cast< ::ps::PBControl*>(
      ::ps::PBControl::internal_default_instance());
}
class PBMeta::HasBitSetters {
 public:
  static void set_has_head(PBMeta* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_body(PBMeta* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::ps::PBControl& control(const PBMeta* msg);
  static void set_has_control(PBMeta* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_request(PBMeta* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_app_id(PBMeta* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_timestamp(PBMeta* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_customer_id(PBMeta* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_push(PBMeta* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_simple_app(PBMeta* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

const ::ps::PBControl&
PBMeta::HasBitSetters::control(const PBMeta* msg) {
  return *msg->control_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMeta::kHeadFieldNumber;
const int PBMeta::kBodyFieldNumber;
const int PBMeta::kControlFieldNumber;
const int PBMeta::kRequestFieldNumber;
const int PBMeta::kAppIdFieldNumber;
const int PBMeta::kTimestampFieldNumber;
const int PBMeta::kDataTypeFieldNumber;
const int PBMeta::kCustomerIdFieldNumber;
const int PBMeta::kPushFieldNumber;
const int PBMeta::kSimpleAppFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMeta::PBMeta()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ps.PBMeta)
}
PBMeta::PBMeta(const PBMeta& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_type_(from.data_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_body()) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  if (from.has_control()) {
    control_ = new ::ps::PBControl(*from.control_);
  } else {
    control_ = nullptr;
  }
  ::memcpy(&head_, &from.head_,
    static_cast<size_t>(reinterpret_cast<char*>(&customer_id_) -
    reinterpret_cast<char*>(&head_)) + sizeof(customer_id_));
  // @@protoc_insertion_point(copy_constructor:ps.PBMeta)
}

void PBMeta::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PBMeta_meta_2eproto.base);
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&control_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&customer_id_) -
      reinterpret_cast<char*>(&control_)) + sizeof(customer_id_));
}

PBMeta::~PBMeta() {
  // @@protoc_insertion_point(destructor:ps.PBMeta)
  SharedDtor();
}

void PBMeta::SharedDtor() {
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete control_;
}

void PBMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PBMeta& PBMeta::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PBMeta_meta_2eproto.base);
  return *internal_default_instance();
}


void PBMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:ps.PBMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_type_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      body_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(control_ != nullptr);
      control_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&head_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&head_)) + sizeof(timestamp_));
  }
  customer_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PBMeta::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PBMeta*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 head = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_head(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes body = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_body();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .ps.PBControl control = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ps::PBControl::_InternalParse;
        object = msg->mutable_control();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional bool request = 4 [default = false];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_request(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool push = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_push(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool simple_app = 6 [default = false];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_simple_app(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 app_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 timestamp = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated int32 data_type = 9 [packed = true];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) == 74) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_data_type();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        do {
          msg->add_data_type(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 72 && (ptr += 1));
        break;
      }
      // optional int32 customer_id = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_customer_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PBMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ps.PBMeta)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_head(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes body = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ps.PBControl control = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_control()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool request = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_request(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &request_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool push = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_push(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &push_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool simple_app = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_simple_app(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &simple_app_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 app_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 timestamp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 data_type = 9 [packed = true];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_data_type())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 74u, input, this->mutable_data_type())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 customer_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_customer_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &customer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ps.PBMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ps.PBMeta)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PBMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ps.PBMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 head = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->head(), output);
  }

  // optional bytes body = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->body(), output);
  }

  // optional .ps.PBControl control = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, HasBitSetters::control(this), output);
  }

  // optional bool request = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->request(), output);
  }

  // optional bool push = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->push(), output);
  }

  // optional bool simple_app = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->simple_app(), output);
  }

  // optional int32 app_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->app_id(), output);
  }

  // optional int32 timestamp = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->timestamp(), output);
  }

  // repeated int32 data_type = 9 [packed = true];
  if (this->data_type_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_type_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->data_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->data_type(i), output);
  }

  // optional int32 customer_id = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->customer_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ps.PBMeta)
}

size_t PBMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ps.PBMeta)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 data_type = 9 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->data_type_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _data_type_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes body = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

    // optional .ps.PBControl control = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *control_);
    }

    // optional int32 head = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head());
    }

    // optional bool request = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool push = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool simple_app = 6 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 app_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->app_id());
    }

    // optional int32 timestamp = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

  }
  // optional int32 customer_id = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->customer_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBMeta::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PBMeta*>(&from));
}

void PBMeta::MergeFrom(const PBMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ps.PBMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_type_.MergeFrom(from.data_type_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_control()->::ps::PBControl::MergeFrom(from.control());
    }
    if (cached_has_bits & 0x00000004u) {
      head_ = from.head_;
    }
    if (cached_has_bits & 0x00000008u) {
      request_ = from.request_;
    }
    if (cached_has_bits & 0x00000010u) {
      push_ = from.push_;
    }
    if (cached_has_bits & 0x00000020u) {
      simple_app_ = from.simple_app_;
    }
    if (cached_has_bits & 0x00000040u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_customer_id(from.customer_id());
  }
}

void PBMeta::CopyFrom(const PBMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ps.PBMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMeta::IsInitialized() const {
  if (has_control()) {
    if (!this->control_->IsInitialized()) return false;
  }
  return true;
}

void PBMeta::Swap(PBMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMeta::InternalSwap(PBMeta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_type_.InternalSwap(&other->data_type_);
  body_.Swap(&other->body_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(control_, other->control_);
  swap(head_, other->head_);
  swap(request_, other->request_);
  swap(push_, other->push_);
  swap(simple_app_, other->simple_app_);
  swap(app_id_, other->app_id_);
  swap(timestamp_, other->timestamp_);
  swap(customer_id_, other->customer_id_);
}

::std::string PBMeta::GetTypeName() const {
  return "ps.PBMeta";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ps
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::ps::PBNode* Arena::CreateMaybeMessage< ::ps::PBNode >(Arena* arena) {
  return Arena::CreateInternal< ::ps::PBNode >(arena);
}
template<> PROTOBUF_NOINLINE ::ps::PBControl* Arena::CreateMaybeMessage< ::ps::PBControl >(Arena* arena) {
  return Arena::CreateInternal< ::ps::PBControl >(arena);
}
template<> PROTOBUF_NOINLINE ::ps::PBMeta* Arena::CreateMaybeMessage< ::ps::PBMeta >(Arena* arena) {
  return Arena::CreateInternal< ::ps::PBMeta >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
